// Generated by CoffeeScript 1.3.3
(function() {
  var Exemplar, NULL_TYPE_NAME, _,
    __hasProp = {}.hasOwnProperty,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  _ = require('underscore');

  NULL_TYPE_NAME = 'null';

  module.exports = Exemplar = (function() {

    function Exemplar(options) {
      options || (options = {});
      this.disallowExtraKeys = options.disallowExtraKeys || false;
      this.ignoredKeys = options.ignoredKeys || [];
      this.allowedTypeNamesByKey = {};
    }

    Exemplar.prototype.typeNameFor = function(val) {
      var childTypes;
      if (!(val != null)) {
        return NULL_TYPE_NAME;
      } else if (_.isArray(val)) {
        childTypes = _(val).map(function(child) {
          return this.typeNameFor(child);
        });
        childTypes = _(childTypes).uniq();
        if (childTypes.length === 1) {
          return '[' + childTypes[0] + ']';
        } else {
          return '[*]';
        }
      } else {
        return typeof val;
      }
    };

    Exemplar.prototype.addExample = function(ex) {
      var allowedTypeNames, key, typeName, val, _base, _ref, _results;
      for (key in ex) {
        if (!__hasProp.call(ex, key)) continue;
        val = ex[key];
        if (__indexOf.call(this.ignoredKeys, key) < 0) {
          typeName = this.typeNameFor(val);
          allowedTypeNames = ((_base = this.allowedTypeNamesByKey)[key] || (_base[key] = []));
          if (__indexOf.call(allowedTypeNames, typeName) < 0) {
            allowedTypeNames.push(typeName);
          }
        }
      }
      _ref = this.allowedTypeNamesByKey;
      _results = [];
      for (key in _ref) {
        allowedTypeNames = _ref[key];
        if (!(ex[key] != null)) {
          if (__indexOf.call(allowedTypeNames, NULL_TYPE_NAME) < 0) {
            _results.push(allowedTypeNames.push(NULL_TYPE_NAME));
          } else {
            _results.push(void 0);
          }
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    };

    Exemplar.prototype.check = function(o) {
      var allowedTypeNames, key, typeName, val;
      if (typeof o !== 'object') {
        return false;
      }
      for (key in o) {
        if (!__hasProp.call(o, key)) continue;
        val = o[key];
        if (__indexOf.call(this.ignoredKeys, key) < 0) {
          typeName = this.typeNameFor(val);
          allowedTypeNames = this.allowedTypeNamesByKey[key];
          if (allowedTypeNames != null) {
            if (__indexOf.call(allowedTypeNames, typeName) < 0) {
              return false;
            }
          } else {
            if (this.disallowExtraKeys) {
              return false;
            }
          }
        }
      }
      return true;
    };

    return Exemplar;

  })();

}).call(this);
